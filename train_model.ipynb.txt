{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Spoon Fork Detection Model Training\n",
    "\n",
    "This notebook demonstrates how to train a deep learning model to classify spoons and forks with >95% accuracy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import os\n",
    "sys.path.append('../src')\n",
    "sys.path.append('../utils')\n",
    "\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from train_model import SpoonForkDetector\n",
    "from data_utils import DataPreprocessor\n",
    "\n",
    "print(f'TensorFlow version: {tf.__version__}')\n",
    "print(f'GPU Available: {tf.config.list_physical_devices(\"GPU\")}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize data preprocessor\n",
    "preprocessor = DataPreprocessor()\n",
    "\n",
    "# Visualize sample images\n",
    "data_dir = '../data'\n",
    "preprocessor.visualize_samples(data_dir, samples_per_class=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Model Creation and Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize detector\n",
    "detector = SpoonForkDetector(img_height=224, img_width=224)\n",
    "\n",
    "# Create model\n",
    "model = detector.create_model()\n",
    "print(f'Model created with {model.count_params():,} parameters')\n",
    "\n",
    "# Display model architecture\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare data generators\n",
    "train_gen, val_gen = detector.prepare_data(data_dir, validation_split=0.2, batch_size=16)\n",
    "\n",
    "print(f'Training samples: {train_gen.samples}')\n",
    "print(f'Validation samples: {val_gen.samples}')\n",
    "print(f'Classes: {list(train_gen.class_indices.keys())}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train the model\n",
    "history = detector.train(train_gen, val_gen, epochs=30)\n",
    "\n",
    "# Plot training history\n",
    "detector.plot_training_history()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluate model\n",
    "accuracy, loss, report = detector.evaluate(val_gen)\n",
    "\n",
    "print(f'Final Validation Accuracy: {accuracy:.2%}')\n",
    "print(f'Final Validation Loss: {loss:.4f}')\n",
    "\n",
    "if accuracy > 0.95:\n",
    "    print('üéâ Target accuracy of >95% achieved!')\n",
    "else:\n",
    "    print('‚ö†Ô∏è Target accuracy not achieved. Consider:')
",
    "    print('- Adding more training data')\n",
    "    print('- Training for more epochs')\n",
    "    print('- Adjusting model architecture')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Save Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the trained model\n",
    "model_path = '../models/spoon_fork_detector_notebook.h5'\n",
    "detector.save_model(model_path)\n",
    "\n",
    "print(f'Model saved to: {model_path}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Test Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test prediction on sample images\n",
    "import glob\n",
    "\n",
    "test_images = glob.glob('../data/*/*.jpg')\n",
    "\n",
    "for img_path in test_images[:5]:  # Test first 5 images\n",
    "    predicted_class, confidence = detector.predict_image(img_path)\n",
    "    actual_class = os.path.basename(os.path.dirname(img_path))\n",
    "    \n",
    "    print(f'Image: {os.path.basename(img_path)}')\n",
    "    print(f'Actual: {actual_class}, Predicted: {predicted_class}')\n",
    "    print(f'Confidence: {confidence:.2%}')\n",
    "    print('-' * 40)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
